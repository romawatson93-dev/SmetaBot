services:
  traefik:
    image: traefik:v3.0
    container_name: smetabot-traefik
    command:
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --certificatesresolvers.le.acme.email=${LE_EMAIL}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.le.acme.httpchallenge=true
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    restart: unless-stopped
    networks:
      - traefik

  db:
    image: postgres:15
    container_name: smetabot-db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      TZ: ${TZ:-UTC}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./infra/migrations:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 6
    restart: unless-stopped

  redis:
    image: redis:7.2-alpine
    container_name: smetabot-redis
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep -q PONG"]
      interval: 10s
      timeout: 3s
      retries: 6
    restart: unless-stopped

  backend:
    build:
      context: .
      dockerfile: backend.Dockerfile
    container_name: smetabot-backend
    env_file:
      - .env
    environment:
      TZ: ${TZ:-UTC}
    volumes:
      - ./backend:/app
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python - << 'PY'\nimport urllib.request,sys;sys.exit(0) if urllib.request.urlopen('http://localhost:8000/health', timeout=3).status==200 else sys.exit(1)\nPY"
        ]
      interval: 10s
      timeout: 3s
      retries: 6
      start_period: 15s
    restart: unless-stopped

  userbot:
    build:
      context: .
      dockerfile: userbot.Dockerfile
    container_name: smetabot-userbot
    env_file:
      - .env
    environment:
      TZ: ${TZ:-UTC}
      SESSIONS_DIR: /app/sessions
    volumes:
      - ./userbot:/app/userbot
      - userbot_sessions:/app/sessions
    expose:
      - "8001"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8001/docs"]
      interval: 15s
      timeout: 5s
      retries: 6
      start_period: 20s
    restart: unless-stopped
    networks:
      - traefik
    labels:
      - traefik.enable=true
      - traefik.http.routers.userbot.rule=Host(`orbitsend.ru`)
      - traefik.http.routers.userbot.entrypoints=websecure
      - traefik.http.routers.userbot.tls=true
      - traefik.http.routers.userbot.tls.certresolver=le
      - traefik.http.services.userbot.loadbalancer.server.port=8001
      - traefik.http.middlewares.userbot-compress.compress=true
      - traefik.http.routers.userbot.middlewares=userbot-compress

  bot:
    build:
      context: .
      dockerfile: bot.Dockerfile
    container_name: smetabot-bot
    env_file:
      - .env
    environment:
      TZ: ${TZ:-UTC}
      USERBOT_URL: http://userbot:8001
    volumes:
      - ./bot:/app
    depends_on:
      userbot:
        condition: service_healthy
      backend:
        condition: service_started
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: worker.Dockerfile
    container_name: smetabot-worker
    env_file:
      - .env
    environment:
      TZ: ${TZ:-UTC}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
    volumes:
      - ./worker:/app
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    restart: unless-stopped

volumes:
  pgdata: {}
  userbot_sessions: {}
  traefik_letsencrypt: {}

networks:
  traefik:
    name: traefik
