# /app/api.py
import os
import re
import logging
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from pyrogram import Client, filters
from pyrogram.errors import RPCError

# ===== –õ–û–ì–ò =====
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s [%(name)s] %(message)s",
)
log = logging.getLogger("userbot")
logging.getLogger("pyrogram").setLevel(logging.INFO)

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
API_ID = int(os.getenv("TG_API_ID", "0"))
API_HASH = os.getenv("TG_API_HASH", "")
SESSION_NAME = os.getenv("TG_SESSION_NAME", "userbot")
SESSION_DIR = "/sessions"

# –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø—Ä–æ–∫—Å–∏ ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ –∑–∞–¥–∞–π—Ç–µ TG_PROXY_URL –≤ .env
# from urllib.parse import urlparse
# def build_proxy(url: str | None):
#     if not url:
#         return None
#     u = urlparse(url)
#     return {
#         "scheme": u.scheme, "hostname": u.hostname, "port": u.port,
#         "username": u.username, "password": u.password
#     }
# PROXY = build_proxy(os.getenv("TG_PROXY_URL"))
PROXY = None

# –≤–∞—à —á–∏—Å–ª–æ–≤–æ–π id –ø–æ–¥—Ö–≤–∞—Ç–∏–º –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
MY_ID: int | None = None

pyro = Client(
    SESSION_NAME,
    api_id=API_ID,
    api_hash=API_HASH,
    workdir=SESSION_DIR,
    proxy=PROXY,
)

app = FastAPI(title="Userbot API")

# ===== –•–£–ö–ò –°–¢–ê–†–¢–ê/–û–°–¢–ê–ù–û–í–ê =====
@app.on_event("startup")
async def _startup():
    await pyro.start()

    # üî• –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –∫—ç—à –ø–∏—Ä–æ–≤, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ 'Peer id invalid'
    try:
        async for _ in pyro.get_dialogs(limit=100):
            pass
        log.info("dialogs warm-up done")
    except Exception as e:
        log.warning("dialogs warm-up failed: %s", e)

    me = await pyro.get_me()

    # ‚¨áÔ∏è –∑–∞–ø–æ–º–Ω–∏–º –≤–∞—à —á–∏—Å–ª–æ–≤–æ–π user id (–Ω–∞–ø—Ä–∏–º–µ—Ä, 370759938)
    global MY_ID
    MY_ID = me.id

    if getattr(me, "is_bot", False):
        raise RuntimeError(
            "Userbot –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –∫–∞–∫ –ë–û–¢. –£–¥–∞–ª–∏—Ç–µ /sessions/*.session –∏ –∑–∞–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º."
        )
    log.info("pyrogram started as %s (%s)", me.username, me.id)

@app.on_event("shutdown")
async def _shutdown():
    await pyro.stop()
    log.info("pyrogram stopped")

# ===== –£–¢–ò–õ–ò–¢–´ =====
def _is_me(msg) -> bool:
    """
    –°—á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–º–æ–∏–º¬ª, –µ—Å–ª–∏ –æ–Ω–æ –∏—Å—Ö–æ–¥—è—â–µ–µ (outgoing=True)
    –ò–õ–ò —è–≤–Ω–æ –æ—Ç –º–æ–µ–≥–æ user_id.
    """
    return bool(
        getattr(msg, "outgoing", False)
        or (getattr(msg, "from_user", None) and msg.from_user.id == MY_ID)
    )

# ===== –°–ï–†–í–ò–°–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ =====
@app.get("/health")
async def health():
    me = await pyro.get_me()
    return {"ok": True, "user": me.username, "id": me.id, "is_bot": getattr(me, "is_bot", None)}

@app.post("/selftest")
async def selftest():
    me = await pyro.get_me()
    await pyro.send_message("me", "‚úÖ Userbot online")
    return {"ok": True, "user_id": me.id}

# ===== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–ü–î–ï–ô–¢–û–í (–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä) =====
@pyro.on_message(filters.text)
async def _dbg_me(client, message):
    # –ª–æ–≥–∏—Ä—É–µ–º –ö–ê–ñ–î–û–ï —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–º–µ—á–∞–µ–º, ¬´–º–æ—ë¬ª –ª–∏ –æ–Ω–æ
    log.info(
        "TXT chat=%s from=%s outgoing=%s is_me=%s text=%r",
        getattr(message.chat, "id", None),
        getattr(getattr(message, "from_user", None), "id", None),
        getattr(message, "outgoing", None),
        _is_me(message),
        message.text,
    )

# ===== –ü–ò–ù–ì-–•–ï–ù–î–õ–ï–† (—Å–æ —Å–ª—ç—à–µ–º –∏ –±–µ–∑; ru/en) =====
@pyro.on_message(
    filters.text & filters.regex(r"^/?(?:ping|pong|–ø–∏–Ω–≥|–ø–æ–Ω–≥)$", flags=re.IGNORECASE)
)
async def ping_me(client, message):
    if not _is_me(message):
        return
    log.info("PING matched text=%r chat=%s", message.text, getattr(message.chat, "id", None))
    await message.reply_text("pong")

# ===== –ú–ò–ù–ò-API: —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ + –∑–∞—â–∏—Ç–∞ + –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º =====
class CreateRoomReq(BaseModel):
    title: str
    bot_username: str  # –Ω–∞–ø—Ä–∏–º–µ—Ä "@YourBot"

class CreateRoomResp(BaseModel):
    chat_id: int
    title: str

@app.post("/create_room", response_model=CreateRoomResp)
async def create_room(req: CreateRoomReq):
    try:
        chat = await pyro.create_channel(req.title, description="–õ–∏—á–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞")
        chat_id = chat.id

        # –í–∫–ª—é—á–∏—Ç—å protected content (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–∞—à–µ–π –≤–µ—Ä—Å–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞/–∞–∫–∫–∞—É–Ω—Ç–∞)
        try:
            # –≤ —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏—è—Ö –º–æ–∂–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É ‚Äî –ª–æ–≤–∏–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏
            await pyro.set_chat_protected_content(chat_id, True)  # type: ignore[attr-defined]
        except Exception as e:
            log.warning("set_chat_protected_content not applied: %s", e)

        # –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –∏ –≤—ã–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞
        await pyro.add_chat_members(chat_id, [req.bot_username])
        await pyro.promote_chat_member(
            chat_id,
            req.bot_username,
            can_manage_chat=True,
            can_post_messages=True,
            can_edit_messages=True,
            can_delete_messages=True,
            can_invite_users=True,
            can_pin_messages=True,
            can_manage_video_chats=False,
            can_promote_members=False,
        )

        return CreateRoomResp(chat_id=chat_id, title=req.title)
    except RPCError as e:
        raise HTTPException(status_code=400, detail=f"Telegram error: {e}")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
