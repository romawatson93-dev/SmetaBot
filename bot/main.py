import logging

import os, asyncio

import httpx

from dotenv import load_dotenv

from bot.handlers.webapp_gate import router as webapp_gate_router

from bot.handlers.webapp import router as webapp_router

from bot.handlers.menu import router as menu_router

from bot.handlers.render_pdf import router as render_pdf_router

from bot.handlers.channel_wizard import router as channel_wizard_router

from bot.handlers.finalize import router as finalize_router

from bot.handlers.subscription import router as subscription_router

from bot.handlers.my_channels import router as my_channels_router

from bot.handlers.profile import router as profile_router

from bot.storage import store_blob

from bot.celery_client import get_celery

from bot.services import channels as channels_service

from bot.services import db as db_service

from bot.services import projects as projects_service

from aiogram import Bot, Dispatcher, F, Router

from aiogram.client.session.aiohttp import AiohttpSession

from aiogram.types import (

    Message, CallbackQuery,

    InlineKeyboardButton, InlineKeyboardMarkup,

    ChatJoinRequest, WebAppInfo,

    ReplyKeyboardMarkup, KeyboardButton

)

from aiogram.types.input_file import BufferedInputFile

from aiogram.filters import Command

from aiogram.fsm.state import StatesGroup, State

from aiogram.fsm.context import FSMContext

from aiogram.fsm.storage.memory import MemoryStorage



logging.basicConfig(level=logging.INFO)

load_dotenv()



BOT_TOKEN = os.getenv("BOT_TOKEN")

BOT_USERNAME = os.getenv("BOT_USERNAME")

USERBOT_URL = os.getenv("USERBOT_URL", "http://userbot:8001")

WEBAPP_URL = os.getenv("WEBAPP_URL", "https://example.com/webapp/login")

if not BOT_TOKEN: raise RuntimeError("BOT_TOKEN not set")



_proxy = os.getenv("TG_PROXY_URL")

if _proxy:

    session = AiohttpSession(proxy=_proxy)

    bot = Bot(BOT_TOKEN, session=session, parse_mode=None)

else:

    bot = Bot(BOT_TOKEN, parse_mode=None)

dp = Dispatcher(storage=MemoryStorage())

dp.include_router(webapp_gate_router)

dp.include_router(webapp_router)

dp.include_router(profile_router)

dp.include_router(menu_router)

dp.include_router(render_pdf_router)

dp.include_router(channel_wizard_router)

dp.include_router(subscription_router)

dp.include_router(finalize_router)

dp.include_router(my_channels_router)

router = Router(); dp.include_router(router)



# ---------- HTTP helpers ----------

async def userbot_post(path: str, json=None):

    async with httpx.AsyncClient(timeout=60) as cl:

        r = await cl.post(f"{USERBOT_URL}{path}", json=json or {}); r.raise_for_status(); return r.json()

async def userbot_get(path: str, params=None):

    async with httpx.AsyncClient(timeout=60) as cl:

        r = await cl.get(f"{USERBOT_URL}{path}", params=params or {}); r.raise_for_status(); return r.json()

async def has_session(contractor_id: str) -> bool:

    try:

        r = await userbot_get("/session/status", {"contractor_id": contractor_id}); return bool(r.get("has_session"))

    except Exception: return False



# ---------- UI helpers ----------

def ik_btn(text, data): return InlineKeyboardButton(text=text, callback_data=data)

def ik_kb(rows): return InlineKeyboardMarkup(inline_keyboard=rows)

async def main_menu_kb(contractor_id: str) -> InlineKeyboardMarkup:

    # –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è

    sess = await userbot_get("/session/status", {"contractor_id": contractor_id})

    has = bool(sess.get("has_session"))

    rows = []

    if not has:

        rows.append([InlineKeyboardButton(

            text="üîê –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç (WebApp)",

            web_app=WebAppInfo(url=os.getenv("WEBAPP_URL", "https://example.com/webapp/login"))

        )])

        rows.append([ik_btn("üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", "check_session")])

    else:

        rows.append([ik_btn("‚ûï –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç (—Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª)", "newproj")])

        rows.append([ik_btn("üéü –°—Å—ã–ª–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (join-request)", "invite")])

    return ik_kb(rows)





async def reply_menu_kb(contractor_id: str) -> ReplyKeyboardMarkup:

    # Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞

    try:

        sess = await userbot_get("/session/status", {"contractor_id": contractor_id})

        has = bool(sess.get("has_session"))

    except Exception:

        has = False

    if not has:

        rows = [

            [KeyboardButton(text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç (WebApp)", web_app=WebAppInfo(url=WEBAPP_URL))],

            [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")],

        ]

    else:

        rows = [

            [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª –±—ã—Å—Ç—Ä–æ")],

            [KeyboardButton(text="–ú–æ–∏ –∫–∞–Ω–∞–ª—ã"), KeyboardButton(text="–ò–Ω–≤–∞–π—Ç")],

            [KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å PDF"), KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],

        ]

    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)





# ---------- FSM ----------

class PhoneLogin(StatesGroup):

    waiting_phone = State()

    waiting_code = State()

    waiting_password = State()



class NewProject(StatesGroup):

    waiting_title = State()



# ---------- COMMANDS ----------

@router.message(Command("start"))

async def cmd_start(m: Message):

    await init_db()

    kb = await main_menu_kb(str(m.from_user.id))

    await m.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø–∞–Ω–µ–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)



# Quick fallback: start phone login via command (no WebApp/HTTPS)

@router.message(Command("phone"))

async def cmd_phone(m: Message, state: FSMContext):

    await state.set_state(PhoneLogin.waiting_phone)

    await m.answer(

        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567:"

    )



# ---------- PHONE LOGIN ----------

@router.callback_query(F.data == "conn_phone")

async def conn_phone_start(cq: CallbackQuery, state: FSMContext):

    await state.set_state(PhoneLogin.waiting_phone)

    await cq.message.answer("–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567:")

    await cq.answer()



@router.callback_query(F.data == "check_session")

async def cb_check_session(cq: CallbackQuery):

    contractor_id = str(cq.from_user.id)

    info = await userbot_get("/session/status", {"contractor_id": contractor_id, "verify": "true"})

    if info.get("has_session") and info.get("authorized"):

        await cq.message.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω. –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")

        kb = await main_menu_kb(contractor_id)

        await cq.message.answer("–ú–µ–Ω—é:", reply_markup=kb)

    else:

        await cq.message.answer("‚è≥ –ü–æ–∫–∞ –Ω–µ –≤–∏–∂—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Ö–æ–¥ –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")

    await cq.answer()





@router.message(PhoneLogin.waiting_phone)

async def phone_got_number(m: Message, state: FSMContext):

    phone = m.text.strip()

    if not phone.startswith("+") or len(phone) < 10:

        await m.answer("–ü–æ—Ö–æ–∂–µ, —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∏–º–µ—Ä: +79991234567")

        return

    r = await userbot_post("/login/phone/start", {"contractor_id": str(m.from_user.id), "phone": phone})

    await state.update_data(token=r["token"])

    await state.set_state(PhoneLogin.waiting_code)

    await m.answer("–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–¥ –≤ Telegram/SMS. –í–≤–µ–¥–∏ 5‚Äì6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥:")



@router.message(PhoneLogin.waiting_code)

async def phone_got_code(m: Message, state: FSMContext):

    data = await state.get_data()

    token = data["token"]

    r = await userbot_post("/login/phone/confirm", {"token": token, "code": m.text.strip()})

    if r["status"] == "ready":

        me = r.get("me") or {}

        await m.answer(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω: @{me.get('username') or 'unknown'}")

        await state.clear()

        kb = await main_menu_kb(str(m.from_user.id))

        await m.answer("–ì–æ—Ç–æ–≤–æ! –í–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é:", reply_markup=kb)

    else:

        await state.set_state(PhoneLogin.waiting_password)

        await m.answer("–í–∫–ª—é—á—ë–Ω –ø–∞—Ä–æ–ª—å 2FA. –í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –æ—Ç Telegram:")



@router.message(PhoneLogin.waiting_password)

async def phone_got_password(m: Message, state: FSMContext):

    data = await state.get_data()

    token = data["token"]

    r = await userbot_post("/login/phone/2fa", {"token": token, "password": m.text})

    me = r.get("me") or {}

    await m.answer(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω: @{me.get('username') or 'unknown'}")

    await state.clear()

    kb = await main_menu_kb(str(m.from_user.id))

    await m.answer("–ì–æ—Ç–æ–≤–æ! –í–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é:", reply_markup=kb)



# ---------- NEW PROJECT ----------

@router.callback_query(F.data == "newproj")

async def cb_newproj(cq: CallbackQuery, state: FSMContext):

    contractor_id = str(cq.from_user.id)

    if not await has_session(contractor_id):

        await cq.message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç (–≤—Ö–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É).")

        await cq.answer(); return

    await state.set_state(NewProject.waiting_title)

    await cq.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (–ø—Ä–∏–º–µ—Ä: ¬´–ü—Ä–æ–µ–∫—Ç –ò–≤–∞–Ω–æ–≤–∞¬ª).")

    await cq.answer()





@router.callback_query(F.data == "newproj_quick")

async def cb_newproj_quick(cq: CallbackQuery):

    contractor_id_int = cq.from_user.id

    contractor_id = str(contractor_id_int)

    if not await has_session(contractor_id):

        await cq.message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ WebApp.")

        await cq.answer()

        return

    title = (f"–ü—Ä–æ–µ–∫—Ç {cq.from_user.first_name or ''}".strip()) or f"–ü—Ä–æ–µ–∫—Ç {contractor_id_int}"

    result = await userbot_post("/rooms/create", {"contractor_id": contractor_id, "title": title})

    channel_peer = int(result["channel_id"])

    chat_id = int(f"-100{abs(channel_peer)}")



    me = await bot.get_me()

    bot_username = me.username if me.username.startswith("@") else f"@{me.username}"

    await userbot_post(

        "/rooms/add_bot_admin",

        {

            "contractor_id": contractor_id,

            "channel_id": channel_peer,

            "bot_username": bot_username,

        },

    )



    chat = await bot.get_chat(chat_id)

    record = await channels_service.create_project_channel(

        contractor_id=contractor_id_int,

        title=title,

        channel_id=chat_id,

        username=getattr(chat, "username", None),

        channel_type=getattr(chat, "type", None),

    )

    project = record.get("project") if record else None



    try:

        link = await bot.create_chat_invite_link(

            chat_id=chat_id,

            name=f"Invite for {title}",

            creates_join_request=True,

        )

        invite_text = f"\n??  (join-request): {link.invite_link}"

        if project:

            await projects_service.create_invite(project["id"], link.invite_link, allowed=1)

    except Exception as exc:

        invite_text = f"\n??    : {exc}"



    await cq.message.answer(

        f"?  \n : <b>{title}</b>\n chat_id: <code>{chat_id}</code> (channel_id: <code>{channel_peer}</code>){invite_text}",

        parse_mode="HTML",

    )

    await cq.answer()













@router.message(NewProject.waiting_title)

async def got_project_title(m: Message, state: FSMContext):

    title = (m.text or "").strip()[:64] or f"–ü—Ä–æ–µ–∫—Ç {m.from_user.id}"

    contractor_id_int = m.from_user.id

    contractor_id = str(contractor_id_int)



    result = await userbot_post("/rooms/create", {"contractor_id": contractor_id, "title": title})

    channel_peer = int(result["channel_id"])

    chat_id = int(f"-100{abs(channel_peer)}")



    me = await bot.get_me()

    bot_username = me.username if me.username.startswith("@") else f"@{me.username}"

    await userbot_post(

        "/rooms/add_bot_admin",

        {

            "contractor_id": contractor_id,

            "channel_id": channel_peer,

            "bot_username": bot_username,

        },

    )



    chat = await bot.get_chat(chat_id)

    await channels_service.create_project_channel(

        contractor_id=contractor_id_int,

        title=title,

        channel_id=chat_id,

        username=getattr(chat, "username", None),

        channel_type=getattr(chat, "type", None),

    )



    await m.answer(f"‚úÖ –ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω –∏ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º.\n–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\nchannel_id: {channel_peer}", parse_mode="HTML")

    await state.clear()

    kb = await main_menu_kb(contractor_id)

    await m.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:", reply_markup=kb)





# ---------- INVITE ----------



@router.callback_query(F.data == "invite")

async def cb_invite(cq: CallbackQuery):

    contractor_id_int = cq.from_user.id

    contractor_id = str(contractor_id_int)

    if not await has_session(contractor_id):

        await cq.message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç (–≤—Ö–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É).")

        await cq.answer()

        return



    latest = await channels_service.get_latest_channel(contractor_id_int)

    if not latest:

        await cq.message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø—Ä–æ–µ–∫—Ç/–∫–∞–Ω–∞–ª.")

        await cq.answer()

        return



    channel_id = int(latest["channel_id"])

    title = latest.get("title") or "–ö–∞–Ω–∞–ª"

    project_id = latest.get("project_id")



    link = await bot.create_chat_invite_link(

        chat_id=channel_id,

        name=f"Invite for {title}",

        creates_join_request=True,

        expire_date=None,

        member_limit=0,

    )



    if project_id is not None:

        await projects_service.create_invite(project_id, link.invite_link, allowed=1)



    await cq.message.answer(
        f"üéü –°—Å—ã–ª–∫–∞ (join-request):\n{link.invite_link}\n‚öôÔ∏è –†–∞–∑—Ä–µ—à–µ–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∏–π: 1",
    )

    await cq.answer()

# ---------- JOIN REQUEST ----------



@router.chat_join_request()

async def on_join_request(evt: ChatJoinRequest):

    user_id = evt.from_user.id

    chat_id = evt.chat.id



    channel = await channels_service.get_channel(chat_id)

    if not channel:

        await bot.decline_chat_join_request(chat_id=chat_id, user_id=user_id)

        return



    project_id = channel.get("project_id")

    if project_id is None:

        await bot.decline_chat_join_request(chat_id=chat_id, user_id=user_id)

        return



    invite = await projects_service.get_latest_invite(project_id)

    if not invite:

        await bot.decline_chat_join_request(chat_id=chat_id, user_id=user_id)

        return



    allowed = int(invite.get("allowed") or 0)

    approved = int(invite.get("approved_count") or 0)

    if approved < allowed or allowed == 0:

        await bot.approve_chat_join_request(chat_id=chat_id, user_id=user_id)

        await projects_service.increment_invite_approved(invite["id"])

    else:

        await bot.decline_chat_join_request(chat_id=chat_id, user_id=user_id)

@router.message(Command("menu"))

async def cmd_menu(m: Message):

    kb = await main_menu_kb(str(m.from_user.id))

    await m.answer("–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ:", reply_markup=kb)



# --------- NEW WIZARD COMMANDS ---------

class NewChannel(StatesGroup):

    waiting_title = State()

    waiting_avatar = State()



@router.message(Command("new"))

async def cmd_new(m: Message, state: FSMContext):

    await state.set_state(NewChannel.waiting_title)

    await m.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –î–æ–º ‚Ä¢ –ü—Ä–æ–µ–∫—Ç –ê).")



@router.message(NewChannel.waiting_title)

async def new_channel_title(m: Message, state: FSMContext):

    title = m.text.strip()[:64]

    await state.update_data(title=title)

    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_avatar2")]])

    await state.set_state(NewChannel.waiting_avatar)

    await m.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", reply_markup=kb)



@router.callback_query(F.data == "skip_avatar2")

async def skip_avatar2(cq: CallbackQuery, state: FSMContext):

    data = await state.get_data()

    await create_channel_pipeline(cq.message, title=data.get("title", "–ü—Ä–æ–µ–∫—Ç"), avatar_bytes=None)

    await state.clear(); await cq.answer()



@router.message(NewChannel.waiting_avatar, F.photo)

async def new_channel_avatar(m: Message, state: FSMContext):

    data = await state.get_data()

    photo = m.photo[-1]

    f = await bot.get_file(photo.file_id)

    b = await bot.download_file(f.file_path)

    await create_channel_pipeline(m, title=data.get("title", "–ü—Ä–æ–µ–∫—Ç"), avatar_bytes=b)

    await state.clear()





async def create_channel_pipeline(msg: Message, title: str, avatar_bytes: bytes | None):

    contractor_id_int = msg.from_user.id

    contractor_id = str(contractor_id_int)



    result = await userbot_post("/rooms/create", {"contractor_id": contractor_id, "title": title})

    channel_peer = int(result["channel_id"])

    chat_id = int(f"-100{abs(channel_peer)}")



    me = await bot.get_me()

    bot_username = me.username if me.username.startswith("@") else f"@{me.username}"

    await userbot_post(

        "/rooms/add_bot_admin",

        {

            "contractor_id": contractor_id,

            "channel_id": channel_peer,

            "bot_username": bot_username,

        },

    )



    avatar_tag = None

    if avatar_bytes:

        try:

            await bot.set_chat_photo(chat_id=chat_id, photo=BufferedInputFile(avatar_bytes, filename="avatar.jpg"))

            avatar_tag = "custom"

        except Exception:

            avatar_tag = None



    chat = await bot.get_chat(chat_id)

    record = await channels_service.create_project_channel(

        contractor_id=contractor_id_int,

        title=title,

        channel_id=chat_id,

        username=getattr(chat, "username", None),

        channel_type=getattr(chat, "type", None),

        avatar_file=avatar_tag,

    )

    project = record.get("project") if record else None



    try:

        link = await bot.create_chat_invite_link(

            chat_id=chat_id,

            name=f"Invite for {title}",

            creates_join_request=True,

        )

        invite_text = f"\nüîó –°—Å—ã–ª–∫–∞ (join-request): {link.invite_link}"

        if project:

            await projects_service.create_invite(project["id"], link.invite_link, allowed=1)

    except Exception as exc:

        invite_text = f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É: {exc}"



    await msg.answer(

        f"‚úÖ –ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω\n‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{title}</b>\n‚Ä¢ chat_id: <code>{chat_id}</code> (channel_id: <code>{channel_peer}</code>){invite_text}",

        parse_mode="HTML",

    )

@router.message(Command("channels"))

async def cmd_channels(m: Message):

    contractor_id_int = m.from_user.id

    rows = await channels_service.list_channels(contractor_id_int, limit=10)

    if not rows:

        await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")

        return

    text = "–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n" + "\n".join(
        f"‚Ä¢ {row.get('title')} ‚Äî <code>{row.get('channel_id')}</code>" for row in rows
    )

    await m.answer(text, parse_mode="HTML")





# --------- EXTRA MENU AND UPLOAD ---------

class UploadFile(StatesGroup):

    waiting_pdf = State()



@router.callback_query(F.data == "newproj_wizard")

async def cb_newproj_wizard(cq: CallbackQuery, state: FSMContext):

    await cb_newproj(cq, state)



@router.callback_query(F.data == "channels")

async def cb_channels(cq: CallbackQuery):

    contractor_id_int = cq.from_user.id

    rows = await channels_service.list_channels(contractor_id_int, limit=10)

    if not rows:

        await cq.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤. –ù–∞–∂–º–∏—Ç–µ ‚Äò–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª‚Äô.")

    else:

        text = "–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n" + "\n".join(
            f"‚Ä¢ {row.get('title')} ‚Äî <code>{row.get('channel_id')}</code>" for row in rows
        )
        await cq.message.answer(text, parse_mode="HTML")

    await cq.answer()





@router.callback_query(F.data == "upload")

async def cb_upload(cq: CallbackQuery, state: FSMContext):

    await state.set_state(UploadFile.waiting_pdf)

    await cq.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ PDF-—Ñ–∞–π–ª. –ú—ã –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ PNG 300 DPI —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º –∏ –æ–ø—É–±–ª–∏–∫—É–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–Ω–∞–ª.")

    await cq.answer()



@router.message(UploadFile.waiting_pdf, F.document)

async def on_pdf(m: Message, state: FSMContext):

    doc = m.document

    filename = doc.file_name or "smeta.pdf"

    if not filename.lower().endswith(".pdf"):

        await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ PDF-—Ñ–∞–π–ª.")

        return

    f = await bot.get_file(doc.file_id)

    data = await bot.download_file(f.file_path)

    try:

        storage_key = await store_blob("pdf", data)

    except Exception as exc:

        await m.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {exc}")

        return



    contractor_id_int = m.from_user.id

    latest = await channels_service.get_latest_channel(contractor_id_int)

    if not latest:

        await m.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞–Ω–∞–ª (/new).")

        return



    chat_id = int(latest["channel_id"])

    wm_text = m.from_user.username or str(m.from_user.id)



    celery_app = get_celery()

    celery_app.send_task(

        "tasks.render.process_and_publish_pdf",

        kwargs={

            "chat_id": chat_id,

            "pdf_key": storage_key,

            "watermark_text": wm_text,

            "filename": filename,

            "page_indices": [1],

        },

        queue=os.getenv("CELERY_PDF_QUEUE", "pdf"),

    )

    await m.answer("‚úÖ –§–∞–π–ª –ø—Ä–∏–Ω—è—Ç. PNG –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

    await state.clear()





@router.callback_query(F.data == "stats")

async def cb_stats(cq: CallbackQuery):

    await cq.message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ (–ø—Ä–æ—Å–º–æ—Ç—Ä—ã/–≤—Å—Ç—É–ø–ª–µ–Ω–∏—è/–≤—ã—Ö–æ–¥—ã).")

    await cq.answer()



# ---------- RUN ----------

async def main():

    await db_service.init_pool()

    print("Bot is up.")

    await bot.delete_webhook(drop_pending_updates=True)

    await dp.start_polling(bot)



if __name__ == "__main__":

    import asyncio; asyncio.run(main())

