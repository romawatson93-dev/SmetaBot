import os
import httpx
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.fsm.context import FSMContext
import aiosqlite
from bot.handlers.channel_wizard import start_wizard
from bot.handlers.my_channels import cmd_channels

router = Router()

USERBOT_URL = os.getenv("USERBOT_URL", "http://userbot:8001")
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://example.com/webapp/login")
ENV = os.getenv("ENV", "dev").lower()
REQUIRE_INIT_DATA = os.getenv("REQUIRE_INIT_DATA", "true" if ENV == "prod" else "false").lower() in ("1","true","yes")


async def userbot_get(path: str, params=None):
    async with httpx.AsyncClient(timeout=60) as cl:
        r = await cl.get(f"{USERBOT_URL}{path}", params=params or {})
        r.raise_for_status()
        return r.json()


def _menu_keyboard() -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton(text="üÜï –ù–æ–≤—ã–π –∫–∞–Ω–∞–ª")],
        [KeyboardButton(text="üì¢ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã"), KeyboardButton(text="üîó –ú–æ–∏ —Å—Å—ã–ª–∫–∏")],
        [KeyboardButton(text="üñºÔ∏è –†–µ–Ω–¥–µ—Ä –≤ PNG"), KeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")],
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")],
    ]
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)


def reply_menu_for(user_id: int, has_session: bool) -> ReplyKeyboardMarkup:
    return _menu_keyboard()


def webapp_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –≤—Ö–æ–¥ (WebApp)", web_app=WebAppInfo(url=WEBAPP_URL))]])


@router.message(Command("start"))
async def cmd_start(m: Message, state: FSMContext):
    contractor_id = str(m.from_user.id)
    try:
        sess = await userbot_get("/session/status", {"contractor_id": contractor_id})
        has = bool(sess.get("has_session"))
    except Exception:
        has = False
    data = await state.get_data()
    mid = data.get("menu_mid")
    init_ok = bool(data.get("init_ok"))
    if REQUIRE_INIT_DATA and not init_ok:
        await m.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ WebApp:", reply_markup=webapp_kb())
        return
    try:
        if mid:
            await m.bot.edit_message_text("–ú–µ–Ω—é:", chat_id=m.chat.id, message_id=mid, reply_markup=reply_menu_for(m.from_user.id, has))
            return
    except Exception:
        pass
    sent = await m.answer("–ú–µ–Ω—é:", reply_markup=reply_menu_for(m.from_user.id, has))
    await state.update_data(menu_mid=sent.message_id)


@router.message(Command("menu"))
async def cmd_menu(m: Message, state: FSMContext):
    contractor_id = str(m.from_user.id)
    try:
        sess = await userbot_get("/session/status", {"contractor_id": contractor_id})
        has = bool(sess.get("has_session"))
    except Exception:
        has = False
    data = await state.get_data()
    mid = data.get("menu_mid")
    init_ok = bool(data.get("init_ok"))
    if REQUIRE_INIT_DATA and not init_ok:
        await m.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ WebApp:", reply_markup=webapp_kb())
        return
    try:
        if mid:
            await m.bot.edit_message_text("–ú–µ–Ω—é:", chat_id=m.chat.id, message_id=mid, reply_markup=reply_menu_for(m.from_user.id, has))
            return
    except Exception:
        pass
    sent = await m.answer("–ú–µ–Ω—é:", reply_markup=reply_menu_for(m.from_user.id, has))
    await state.update_data(menu_mid=sent.message_id)


@router.message(F.text == "üÜï –ù–æ–≤—ã–π –∫–∞–Ω–∞–ª")
async def act_new_channel(m: Message, state: FSMContext):
    await start_wizard(m, state)


@router.message(F.text == "üì¢ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")
async def act_my_channels(m: Message, state: FSMContext):
    await cmd_channels(m, state)


@router.message(F.text == "üîó –ú–æ–∏ —Å—Å—ã–ª–∫–∏")
async def act_my_links(m: Message):
    await m.answer("üîó –°–∫–æ—Ä–æ: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π. –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª ‚Äòüì¢ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã‚Äô.")


@router.message(F.text == "üñºÔ∏è –†–µ–Ω–¥–µ—Ä –≤ PNG")
async def act_render_png(m: Message):
    await m.answer("üñºÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ PDF-—Ñ–∞–π–ª –≤ —ç—Ç–æ—Ç —á–∞—Ç ‚Äî –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º —Ä–µ–Ω–¥–µ—Ä –≤ PNG c –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º.")


@router.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def act_profile(m: Message):
    await m.answer("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: —Å–∫–æ—Ä–æ —Ç—É—Ç –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞, —Ç–∞—Ä–∏—Ñ –∏ –∫–≤–æ—Ç—ã.")


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def act_help(m: Message):
    await m.answer("‚ùì –ü–æ–º–æ—â—å:\n- –°–æ–∑–¥–∞–π—Ç–µ ‚ÄòüÜï –ù–æ–≤—ã–π –∫–∞–Ω–∞–ª‚Äô –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ ‚Äòüì¢ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã‚Äô.\n- –í dev-—Ä–µ–∂–∏–º–µ WebApp –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –í prod ‚Äî —Å–Ω–∞—á–∞–ª–∞ ‚Äò–û—Ç–∫—Ä—ã—Ç—å –≤—Ö–æ–¥ (WebApp)‚Äô.")


# Legacy shortcuts from the previous menu
@router.message(F.text == "ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ")
async def legacy_invite(m: Message):
    await m.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É–Ω–∫—Ç ‚Äòüîó –ú–æ–∏ —Å—Å—ã–ª–∫–∏‚Äô –∏–ª–∏ ‚Äòüì¢ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã‚Äô –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏.")

