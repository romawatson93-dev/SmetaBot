import os
import httpx
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
import aiosqlite
from aiogram.fsm.state import StatesGroup, State

router = Router()

USERBOT_URL = os.getenv("USERBOT_URL", "http://userbot:8001")
DB_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "data.db"))


async def userbot_get(path: str, params=None):
    async with httpx.AsyncClient(timeout=60) as cl:
        r = await cl.get(f"{USERBOT_URL}{path}", params=params or {})
        r.raise_for_status()
        return r.json()


def reply_menu_for(user_id: int, has_session: bool) -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton(text="üÜï –ù–æ–≤—ã–π –∫–∞–Ω–∞–ª")],
        [KeyboardButton(text="üìö –ú–æ–∏ –∫–∞–Ω–∞–ª—ã"), KeyboardButton(text="üîó –ú–æ–∏ —Å—Å—ã–ª–∫–∏")],
        [KeyboardButton(text="üñºÔ∏è –†–µ–Ω–¥–µ—Ä –≤ PNG"), KeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")],
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")],
    ]
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)


@router.message(Command("start"))
async def cmd_start(m: Message, state: FSMContext):
    contractor_id = str(m.from_user.id)
    try:
        sess = await userbot_get("/session/status", {"contractor_id": contractor_id})
        has = bool(sess.get("has_session"))
    except Exception:
        has = False
    data = await state.get_data()
    mid = data.get("menu_mid")
    try:
        if mid:
            await m.bot.edit_message_text("–ú–µ–Ω—é:", chat_id=m.chat.id, message_id=mid, reply_markup=reply_menu_for(m.from_user.id, has))
            return
    except Exception:
        pass
    sent = await m.answer("–ú–µ–Ω—é:", reply_markup=reply_menu_for(m.from_user.id, has))
    await state.update_data(menu_mid=sent.message_id)


@router.message(Command("menu"))
async def cmd_menu(m: Message, state: FSMContext):
    contractor_id = str(m.from_user.id)
    try:
        sess = await userbot_get("/session/status", {"contractor_id": contractor_id})
        has = bool(sess.get("has_session"))
    except Exception:
        has = False
    data = await state.get_data()
    mid = data.get("menu_mid")
    try:
        if mid:
            await m.bot.edit_message_text("–ú–µ–Ω—é:", chat_id=m.chat.id, message_id=mid, reply_markup=reply_menu_for(m.from_user.id, has))
            return
    except Exception:
        pass
    sent = await m.answer("–ú–µ–Ω—é:", reply_markup=reply_menu_for(m.from_user.id, has))
    await state.update_data(menu_mid=sent.message_id)


@router.message(F.text == "üÜï –ù–æ–≤—ã–π –∫–∞–Ω–∞–ª")
async def msg_new_channel(m: Message, state: FSMContext):
    from bot.handlers.channel_wizard import start_wizard
    await start_wizard(m, state)


@router.message(F.text == "üìö –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")
async def msg_channels_redirect(m: Message, state: FSMContext):
    from bot.handlers.my_channels import cmd_channels
    await cmd_channels(m, state)


@router.message(F.text == "üîó –ú–æ–∏ —Å—Å—ã–ª–∫–∏")
async def msg_invite(m: Message, bot: Bot):
    contractor_id = str(m.from_user.id)
    async with aiosqlite.connect(os.path.join(os.path.dirname(__file__), "..", "data.db")) as conn:
        async with conn.execute(
            "SELECT id, title, channel_id FROM projects WHERE contractor_id=? ORDER BY id DESC LIMIT 1",
            (contractor_id,)
        ) as cur:
            row = await cur.fetchone()
    if not row:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞–Ω–∞–ª (‚Äò–ù–æ–≤—ã–π –∫–∞–Ω–∞–ª‚Äô).")
        return
    project_id, title, channel_id = row
    try:
        link = await bot.create_chat_invite_link(
            chat_id=channel_id, name=f"Invite for {title}",
            creates_join_request=True, expire_date=None, member_limit=0
        )
        async with aiosqlite.connect(os.path.join(os.path.dirname(__file__), "..", "data.db")) as conn:
            await conn.execute(
                "INSERT INTO invites(project_id, invite_link, allowed) VALUES(?,?,?)",
                (project_id, link.invite_link, 1)
            )
            await conn.commit()
        await m.answer(f"üîó –°—Å—ã–ª–∫–∞ (join-request):\n{link.invite_link}\nüë§ –†–∞–∑—Ä–µ—à–µ–Ω–æ: 1")
    except Exception as e:
        await m.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É: {e}")


@router.message(F.text == "üñºÔ∏è –†–µ–Ω–¥–µ—Ä –≤ PNG")
async def msg_upload(m: Message):
    await m.answer("–ü—Ä–∏—à–ª–∏—Ç–µ PDF‚Äë—Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç. –Ø –ø–æ—Å—Ç–∞–≤–ª—é –∑–∞–¥–∞—á—É –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ PNG —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º.")


@router.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def msg_profile(m: Message):
    await m.answer("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∫–≤–æ—Ç—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∏.")


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def msg_help(m: Message):
    await m.answer("–ü–æ–º–æ—â—å:\n- üÜï –ù–æ–≤—ã–π –∫–∞–Ω–∞–ª ‚Äî —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –∏ –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç—É.\n- üìö –ú–æ–∏ –∫–∞–Ω–∞–ª—ã ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤.\n- üîó –ú–æ–∏ —Å—Å—ã–ª–∫–∏ ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (join-request).\n- üñºÔ∏è –†–µ–Ω–¥–µ—Ä –≤ PNG ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.\n- üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).")
