import os
import aiosqlite
import httpx
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types.input_file import BufferedInputFile

router = Router()

USERBOT_URL = os.getenv("USERBOT_URL", "http://userbot:8001")
DB_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "data.db"))
INVITES_CACHE: dict[int, str] = {}


async def userbot_post(path: str, json=None):
    async with httpx.AsyncClient(timeout=60) as cl:
        r = await cl.post(f"{USERBOT_URL}{path}", json=json or {})
        r.raise_for_status()
        return r.json()


@router.callback_query(F.data == "cw:final3")
async def finalize_with_progress(cq: CallbackQuery, bot: Bot):
    uid = cq.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –º–æ–¥—É–ª—è (FSM —É–∂–µ –æ—á–∏—â–∞–µ—Ç—Å—è –≤ —Å—Ç–∞—Ä–æ–º —Ñ–∏–Ω–∞–ª–µ)
    # –ó–¥–µ—Å—å –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    await cq.message.edit_text("‚è≥ –°–æ–∑–¥–∞—é –∫–∞–Ω–∞–ª‚Ä¶")
    contractor_id = str(uid)
    title = f"–ö–∞–Ω–∞–ª {uid}"
    r = await userbot_post("/rooms/create", {"contractor_id": contractor_id, "title": title})
    channel_id = int(r["channel_id"])  # Telethon id
    chat_id = int(f"-100{abs(channel_id)}")
    await cq.message.edit_text("‚úÖ –ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω\n‚è≥ –î–æ–±–∞–≤–ª—è—é –±–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º‚Ä¶")
    me = await bot.get_me(); bot_username = me.username if me.username.startswith('@') else f"@{me.username}"
    await userbot_post("/rooms/add_bot_admin", {"contractor_id": contractor_id, "channel_id": channel_id, "bot_username": bot_username})
    await cq.message.edit_text("‚úÖ –ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω\n‚úÖ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º\n‚è≥ –°–æ—Ö—Ä–∞–Ω—è—é –ø—Ä–æ–µ–∫—Ç‚Ä¶")
    async with aiosqlite.connect(DB_PATH) as conn:
        await conn.execute("INSERT INTO projects(contractor_id, title, channel_id) VALUES(?,?,?)", (contractor_id, title, chat_id))
        await conn.commit()
    await cq.message.edit_text("‚úÖ –ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω\n‚úÖ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º\n‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω\n‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Å—ã–ª–∫—É‚Ä¶")
    try:
        link = await bot.create_chat_invite_link(chat_id=chat_id, name=f"Invite for {title}", member_limit=1)
        invite = link.invite_link
    except Exception as e:
        invite = f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É: {e}"
    INVITES_CACHE[uid] = invite
    report = f"‚úÖ –ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω\n\n–°—Å—ã–ª–∫–∞ (–±–µ—Å—Å—Ä–æ—á–Ω–∞—è, 1 —á–µ–ª–æ–≤–µ–∫):\n{invite}"
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîó –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data="cw:copy_invite"), InlineKeyboardButton(text="‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=invite if isinstance(invite, str) and invite.startswith("http") else None)]])
    await cq.message.edit_text(report, reply_markup=kb, disable_web_page_preview=True)
    await cq.answer()


@router.callback_query(F.data == "cw:copy_invite")
async def copy_invite(cq: CallbackQuery):
    invite = INVITES_CACHE.get(cq.from_user.id)
    if not invite:
        await cq.answer("–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True); return
    await cq.message.answer(f"–°—Å—ã–ª–∫–∞:\n<code>{invite}</code>", parse_mode='HTML', disable_web_page_preview=True)
    await cq.answer("–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

