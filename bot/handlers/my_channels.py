from __future__ import annotations

from typing import Any, Dict, List, Optional
import httpx
import os

from aiogram import Bot, F, Router
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError, TelegramNotFound
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

import bot.services.channels as channels_service

router = Router()

MENU_PREFIX = "chmenu"
CHANNEL_PAGE_SIZE = 6
USERBOT_URL = os.getenv("USERBOT_URL", "http://userbot:8001")


class ChannelsSearch(StatesGroup):
    waiting_query = State()


def _overview_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üóÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–∞–Ω–∞–ª–æ–≤", callback_data=f"{MENU_PREFIX}:recent")],
            [InlineKeyboardButton(text="üìã –í—Å–µ –∫–∞–Ω–∞–ª—ã", callback_data=f"{MENU_PREFIX}:all:0")],
            [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data=f"{MENU_PREFIX}:search")],
        ]
    )


def _format_overview_text(stats: Dict[str, Any]) -> str:
    lines = [
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤:",
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: {stats.get('channels_count', 0)}",
        f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {stats.get('files_count', 0)}",
        f"‚Ä¢ –°—É–º–º–∞—Ä–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {stats.get('views_total', 0)}",
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–∞–π—Ç–æ–≤: {stats.get('active_invites', 0)}",
        f"‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats.get('clients_total', 0)}",
        f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats.get('blocked_clients', 0)}",
    ]
    recent = stats.get("recent_titles") or []
    if recent:
        lines.append("")
        lines.append("üóÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞–Ω–∞–ª—ã:")
        for title in recent:
            lines.append(f"  ‚Ä¢ {title}")
    return "\n".join(lines)


async def _ensure_card(
    *,
    bot: Bot,
    state: FSMContext,
    chat_id: int,
    text: str,
    keyboard: InlineKeyboardMarkup,
    message: Optional[Message] = None,
) -> None:
    data = await state.get_data()
    current_mid = data.get("channels_card_mid")

    if message and current_mid == message.message_id:
        try:
            await message.edit_text(text, reply_markup=keyboard)
            await state.update_data(channels_card_mid=message.message_id)
            return
        except TelegramBadRequest:
            pass

    if current_mid:
        try:
            await bot.edit_message_text(text=text, chat_id=chat_id, message_id=current_mid, reply_markup=keyboard)
            return
        except TelegramBadRequest:
            try:
                await bot.delete_message(chat_id, current_mid)
            except Exception:
                pass

    sent = await bot.send_message(chat_id, text, reply_markup=keyboard)
    await state.update_data(channels_card_mid=sent.message_id)


async def _fetch_channels(
    contractor_id: int,
    *,
    limit: Optional[int] = None,
    search: Optional[str] = None,
) -> List[Dict[str, Any]]:
    rows = await channels_service.list_channels(
        contractor_id,
        limit=limit or 100,
        search=search,
    )
    return [
        {
            "project_id": row["project_id"],
            "title": row["title"],
            "channel_id": int(row["channel_id"]),
        }
        for row in rows
    ]


async def _collect_overview_stats(contractor_id: int, username: str = None, full_name: str = None) -> Dict[str, Any]:
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–¥—Ä—è–¥—á–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ
    from bot.services import contractors
    await contractors.get_or_create_by_tg(
        contractor_id,
        username=username,
        full_name=full_name,
    )
    
    aggregate = await channels_service.aggregate_contractor_stats(contractor_id)
    recent = await channels_service.list_channels(contractor_id, limit=5)
    aggregate["recent_titles"] = [row["title"] for row in recent]
    return aggregate


async def show_channels_overview(cq: CallbackQuery, state: FSMContext) -> None:
    contractor_id_int = cq.from_user.id
    stats = await _collect_overview_stats(
        contractor_id_int,
        username=cq.from_user.username,
        full_name=cq.from_user.full_name,
    )
    text = _format_overview_text(stats)
    keyboard = _overview_keyboard()
    await _ensure_card(
        bot=cq.message.bot,
        state=state,
        chat_id=cq.message.chat.id,
        text=text,
        keyboard=keyboard,
        message=cq.message,
    )
    await state.update_data(channels_view={"type": "overview"})
    await cq.answer()


async def show_recent_channels_view(cq: CallbackQuery, state: FSMContext) -> None:
    contractor_id_int = cq.from_user.id
    items = await _fetch_channels(contractor_id_int, limit=5)
    if not items:
        text = "–ö–∞–Ω–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{MENU_PREFIX}:main")]])
    else:
        text_lines = ["üóÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞–Ω–∞–ª—ã:", ""]
        for item in items:
            text_lines.append(f"‚Ä¢ {item['title']}")
        text = "\n".join(text_lines)
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"üìÇ {item['title']}", callback_data=f"{MENU_PREFIX}:detail:{item['project_id']}:recent:0")]
                for item in items
            ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{MENU_PREFIX}:main")]]
        )
    await _ensure_card(
        bot=cq.message.bot,
        state=state,
        chat_id=cq.message.chat.id,
        text=text,
        keyboard=keyboard,
        message=cq.message,
    )
    await state.update_data(channels_view={"type": "recent"})
    await cq.answer()


async def show_all_channels_view(cq: CallbackQuery, state: FSMContext, page: int = 0) -> None:
    contractor_id_int = cq.from_user.id
    items = await _fetch_channels(contractor_id_int, limit=500)
    if not items:
        text = "–ö–∞–Ω–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{MENU_PREFIX}:main")]])
    else:
        total_pages = max(1, (len(items) + CHANNEL_PAGE_SIZE - 1) // CHANNEL_PAGE_SIZE)
        page = max(0, min(page, total_pages - 1))
        start = page * CHANNEL_PAGE_SIZE
        subset = items[start : start + CHANNEL_PAGE_SIZE]

        text_lines = [f"üìã –í—Å–µ –∫–∞–Ω–∞–ª—ã ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}", ""]
        text_lines.extend(f"‚Ä¢ {item['title']}" for item in subset)
        text = "\n".join(text_lines)

        rows: List[List[InlineKeyboardButton]] = [
            [InlineKeyboardButton(text=f"üìÇ {item['title']}", callback_data=f"{MENU_PREFIX}:detail:{item['project_id']}:all:{page}")]
            for item in subset
        ]
        if total_pages > 1:
            nav_row: List[InlineKeyboardButton] = []
            if page > 0:
                nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"{MENU_PREFIX}:all:{page - 1}"))
            nav_row.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data=f"{MENU_PREFIX}:noop"))
            if page + 1 < total_pages:
                nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"{MENU_PREFIX}:all:{page + 1}"))
            rows.append(nav_row)
        rows.append([InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data=f"{MENU_PREFIX}:main")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=rows)

    await _ensure_card(
        bot=cq.message.bot,
        state=state,
        chat_id=cq.message.chat.id,
        text=text,
        keyboard=keyboard,
        message=cq.message,
    )
    await state.update_data(channels_view={"type": "all", "page": page})
    await cq.answer()


async def start_channels_search_inline(cq: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(ChannelsSearch.waiting_query)
    text = "üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞."
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{MENU_PREFIX}:main")]])
    await _ensure_card(
        bot=cq.message.bot,
        state=state,
        chat_id=cq.message.chat.id,
        text=text,
        keyboard=keyboard,
        message=cq.message,
    )
    await state.update_data(channels_view={"type": "search"})
    await cq.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ —á–∞—Ç")


async def _get_channel_detail(project_id: int) -> Optional[Dict[str, Any]]:
    channel = await channels_service.get_channel_by_project(project_id)
    if not channel:
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
    stats = await channels_service.get_channel_stats(int(channel["id"]))
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã —á–µ—Ä–µ–∑ userbot API
    try:
        contractor_id = channel["contractor_id"]
        tg_chat_id = channel["tg_chat_id"]
        
        async with httpx.AsyncClient(timeout=10) as client:
            response = await client.post(
                f"{USERBOT_URL}/rooms/get_views",
                json={
                    "contractor_id": str(contractor_id),
                    "channel_id": tg_chat_id,
                    "limit": 50
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get("ok"):
                    views_data = result.get("views", {})
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏
                    total_views = sum(views_data.values())
                    stats["total_views"] = total_views
                    stats["recent_views"] = len(views_data)
                    
    except Exception as e:
        print(f"Error getting real-time views: {e}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î –∫–∞–∫ fallback
    
    return stats


async def _format_channel_detail(bot: Bot, info: Dict[str, Any]) -> tuple[str, InlineKeyboardMarkup]:
    from datetime import datetime
    
    project_id = info.get("project_id")
    title = info.get("title") or info.get("project_title") or "–ö–∞–Ω–∞–ª"
    # channel_id –≤ info - —ç—Ç–æ tg_chat_id –∏–∑ Telegram
    tg_chat_id = int(info.get("channel_id", 0))

    # –ü–æ–ª—É—á–∞–µ–º –ë–î ID –∫–∞–Ω–∞–ª–∞
    channel_row = await channels_service.get_channel_by_project(project_id)
    channel_db_id = channel_row.get("id") if channel_row else None
    
    lines = [
        f"üìå {title}",
        f"ID: {tg_chat_id}",
        "",
    ]
    if info.get("username"):
        lines.append(f"@: @{info['username']}")
    if info.get("created_at"):
        lines.append(f"–°–æ–∑–¥–∞–Ω: {info['created_at']:%Y-%m-%d %H:%M}")
    lines.append("")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
    files_count = info.get("files_count", 0)
    views_total = info.get("views_total", 0)
    lines.append(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    lines.append(f"‚Ä¢ –§–∞–π–ª–æ–≤: {files_count}")
    lines.append(f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {views_total}")
    lines.append("")

    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏
    if channel_db_id:
        publications = await channels_service.get_channel_publications(channel_db_id, limit=10)
        if publications:
            lines.append("üìÅ –§–∞–π–ª—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):")
            for pub in publications:
                file_name = pub.get("file_name", "–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                views = pub.get("views", 0)
                lines.append(f"  ‚Ä¢ {file_name} ({views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)")
            lines.append("")
    
    # –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–∞–¥–º–∏–Ω—ã + —É—á–∞—Å—Ç–Ω–∏–∫–∏)
    lines.append("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:")
    
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–∑ Telegram
    try:
        admins = await bot.get_chat_administrators(tg_chat_id)
        lines.append("  üîπ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:")
        for admin in admins[:10]:  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –ø–µ—Ä–≤—ã–º–∏
            user = admin.user
            username = f"@{user.username}" if user.username else "–±–µ–∑ username"
            lines.append(f"     ‚Ä¢ {user.full_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}")
            lines.append(f"       {username} (id: {user.id})")
        if len(admins) > 10:
            lines.append(f"     ... –∏ –µ—â–µ {len(admins) - 10}")
    except Exception as e:
        lines.append("  üîπ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    
    # –ö–ª–∏–µ–Ω—Ç—ã, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏–µ—Å—è –ø–æ —Å—Å—ã–ª–∫–∞–º
    if channel_db_id:
        clients = await channels_service.get_channel_clients(channel_db_id)
        if clients:
            active_clients = [c for c in clients if not c.get("blocked")]
            blocked_clients = [c for c in clients if c.get("blocked")]
            
            if active_clients:
                lines.append(f"\n  üîπ –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(active_clients)}):")
                for client in active_clients[:15]:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 15
                    username = f"@{client['username']}" if client.get("username") else "–±–µ–∑ username"
                    full_name = client.get("full_name") or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                    user_id = client.get("tg_user_id", "?")
                    lines.append(f"     ‚Ä¢ {full_name}")
                    lines.append(f"       {username} (id: {user_id})")
                if len(active_clients) > 15:
                    lines.append(f"     ... –∏ –µ—â–µ {len(active_clients) - 15}")
            
            if blocked_clients:
                lines.append(f"\n  üî∏ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ({len(blocked_clients)}):")
                for client in blocked_clients[:5]:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5
                    username = f"@{client['username']}" if client.get("username") else "–±–µ–∑ username"
                    full_name = client.get("full_name") or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                    user_id = client.get("tg_user_id", "?")
                    lines.append(f"     ‚Ä¢ {full_name} ({username}, id: {user_id})")
                if len(blocked_clients) > 5:
                    lines.append(f"     ... –∏ –µ—â–µ {len(blocked_clients) - 5}")

    # –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
    text = "\n".join(lines)
    if len(text) > 4000:
        text = text[:3997] + "..."

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{MENU_PREFIX}:main")],
        ]
    )
    return text, keyboard


async def refresh_channel_stats_silent(project_id: int) -> None:
    """–¢–∏—Ö–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ userbot API."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel_info = await channels_service.get_channel_by_project(project_id)
        if not channel_info:
            return
        
        contractor_id = channel_info["contractor_id"]
        tg_chat_id = channel_info["tg_chat_id"]
        
        # –í—ã–∑—ã–≤–∞–µ–º userbot API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        async with httpx.AsyncClient(timeout=30) as client:
            response = await client.post(
                f"{USERBOT_URL}/rooms/refresh_stats",
                json={
                    "contractor_id": str(contractor_id),
                    "channel_id": tg_chat_id
                }
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get("status") == "ok":
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
                    pass
            
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        print(f"Error refreshing stats for channel {project_id}: {e}")

async def refresh_channel_stats(cq: CallbackQuery, state: FSMContext, project_id: int) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ userbot API —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        await cq.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel_info = await channels_service.get_channel_by_project(project_id)
        if not channel_info:
            await cq.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        contractor_id = channel_info["contractor_id"]
        tg_chat_id = channel_info["tg_chat_id"]
        
        # –í—ã–∑—ã–≤–∞–µ–º userbot API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        async with httpx.AsyncClient(timeout=30) as client:
            response = await client.post(
                f"{USERBOT_URL}/rooms/refresh_stats",
                json={
                    "contractor_id": str(contractor_id),
                    "channel_id": tg_chat_id
                }
            )
            
            if response.status_code != 200:
                await cq.answer(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}", show_alert=True)
                return
            
            result = response.json()
            
            if result.get("status") == "ok":
                updated_count = result.get("updated", 0)
                await cq.answer(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Å–æ–æ–±—â–µ–Ω–∏–π", show_alert=True)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                await show_channel_detail_view(cq, state, project_id)
            else:
                error = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                await cq.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}", show_alert=True)
            
    except Exception as e:
        await cq.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}", show_alert=True)


async def show_channel_detail_view(cq: CallbackQuery, state: FSMContext, project_id: int) -> None:
    info = await _get_channel_detail(project_id)
    if not info:
        await cq.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    text, keyboard = await _format_channel_detail(cq.message.bot, info)
    await _ensure_card(
        bot=cq.message.bot,
        state=state,
        chat_id=cq.message.chat.id,
        text=text,
        keyboard=keyboard,
        message=cq.message,
    )
    await state.update_data(channels_view={"type": "detail", "project_id": project_id})
    await cq.answer()


@router.message(ChannelsSearch.waiting_query)
async def handle_search_query(m: Message, state: FSMContext) -> None:
    query = (m.text or "").strip()
    if not query:
        await m.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.")
        return
    await state.set_state(None)
    contractor_id_int = m.from_user.id
    items = await _fetch_channels(contractor_id_int, search=query, limit=50)
    if not items:
        text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ ¬´{query}¬ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{MENU_PREFIX}:main")]])
    else:
        text_lines = [f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ ¬´{query}¬ª:"] + [f"‚Ä¢ {item['title']}" for item in items]
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"üìÇ {item['title']}", callback_data=f"{MENU_PREFIX}:detail:{item['project_id']}:search:0")]
                for item in items
            ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{MENU_PREFIX}:main")]]
        )
        text = "\n".join(text_lines)
    await _ensure_card(
        bot=m.bot,
        state=state,
        chat_id=m.chat.id,
        text=text,
        keyboard=keyboard,
    )
    await state.update_data(channels_view={"type": "search_results", "query": query})


async def show_channels_overview_inline(bot: Bot, chat_id: int, state: FSMContext, contractor_id: int) -> None:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–Ω–∞–ª–æ–≤."""
    stats = await _collect_overview_stats(
        contractor_id,
        username=None,
        full_name=None,
    )
    text = _format_overview_text(stats)
    keyboard = _overview_keyboard()
    await _ensure_card(
        bot=bot,
        state=state,
        chat_id=chat_id,
        text=text,
        keyboard=keyboard,
    )
    await state.update_data(channels_view={"type": "overview"})



@router.callback_query(F.data.startswith(f"{MENU_PREFIX}:"))
async def channels_menu_callback(cq: CallbackQuery, state: FSMContext) -> None:
    parts = cq.data.split(":")
    action = parts[1]
    if action == "main":
        await show_channels_overview(cq, state)
    elif action == "recent":
        await show_recent_channels_view(cq, state)
    elif action == "all":
        page = int(parts[2]) if len(parts) > 2 else 0
        await show_all_channels_view(cq, state, page)
    elif action == "search":
        await start_channels_search_inline(cq, state)
    elif action == "detail":
        project_id = int(parts[2])
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞
        await refresh_channel_stats_silent(project_id)
        await show_channel_detail_view(cq, state, project_id)
    elif action == "goto":
        project_id = int(parts[2])
        channel = await channels_service.get_channel_by_project(project_id)
        if not channel:
            await cq.answer("–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        channel_id = int(channel["channel_id"])
        title = channel.get("title") or "–ö–∞–Ω–∞–ª"
        try:
            chat = await cq.bot.get_chat(channel_id)
            if chat.username:
                url = f"https://t.me/{chat.username}"
            else:
                url = await cq.bot.export_chat_invite_link(channel_id)
            await cq.message.answer(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª {title}:\n{url}")
            await cq.answer()
        except Exception as exc:
            await cq.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É: {exc}", show_alert=True)
    elif action in {"edit", "files"}:
        await cq.answer("–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
    elif action == "noop":
        await cq.answer()
    else:
        await cq.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
