from __future__ import annotations

from typing import Any, Dict, List, Optional

from aiogram import Bot, F, Router
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError, TelegramNotFound
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from bot.services import channels as channels_service

router = Router()

MENU_PREFIX = "chmenu"
CHANNEL_PAGE_SIZE = 6


class ChannelsSearch(StatesGroup):
    waiting_query = State()


def _overview_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üóÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–∞–Ω–∞–ª–æ–≤", callback_data=f"{MENU_PREFIX}:recent")],
            [InlineKeyboardButton(text="üìã –í—Å–µ –∫–∞–Ω–∞–ª—ã", callback_data=f"{MENU_PREFIX}:all:0")],
            [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data=f"{MENU_PREFIX}:search")],
        ]
    )


def _format_overview_text(stats: Dict[str, Any]) -> str:
    lines = [
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤:",
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: {stats.get('total_channels', 0)}",
        f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {stats.get('total_files', 0)}",
        f"‚Ä¢ –°—É–º–º–∞—Ä–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {stats.get('total_views', 0)}",
    ]
    recent = stats.get("recent_titles") or []
    if recent:
        lines.append("")
        lines.append("üóÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞–Ω–∞–ª—ã:")
        for title in recent:
            lines.append(f"  ‚Ä¢ {title}")
    return "\n".join(lines)


async def _ensure_card(
    *,
    bot: Bot,
    state: FSMContext,
    chat_id: int,
    text: str,
    keyboard: InlineKeyboardMarkup,
    message: Optional[Message] = None,
) -> None:
    data = await state.get_data()
    current_mid = data.get("channels_card_mid")

    if message and current_mid == message.message_id:
        try:
            await message.edit_text(text, reply_markup=keyboard)
            await state.update_data(channels_card_mid=message.message_id)
            return
        except TelegramBadRequest:
            pass

    if current_mid:
        try:
            await bot.edit_message_text(text=text, chat_id=chat_id, message_id=current_mid, reply_markup=keyboard)
            return
        except TelegramBadRequest:
            try:
                await bot.delete_message(chat_id, current_mid)
            except Exception:
                pass

    sent = await bot.send_message(chat_id, text, reply_markup=keyboard)
    await state.update_data(channels_card_mid=sent.message_id)


async def _fetch_channels(
    contractor_id: int,
    *,
    limit: Optional[int] = None,
    search: Optional[str] = None,
) -> List[Dict[str, Any]]:
    rows = await channels_service.list_channels(
        contractor_id,
        limit=limit or 100,
        search=search,
    )
    return [
        {
            "project_id": row["project_id"],
            "title": row["title"],
            "channel_id": int(row["channel_id"]),
        }
        for row in rows
    ]


async def _collect_overview_stats(contractor_id: int) -> Dict[str, Any]:
    aggregate = await channels_service.aggregate_contractor_stats(contractor_id)
    recent = await channels_service.list_channels(contractor_id, limit=5)
    aggregate["recent_titles"] = [row["title"] for row in recent]
    return aggregate


async def show_channels_overview(cq: CallbackQuery, state: FSMContext) -> None:
    contractor_id_int = cq.from_user.id
    stats = await _collect_overview_stats(contractor_id_int)
    text = _format_overview_text(stats)
    keyboard = _overview_keyboard()
    await _ensure_card(
        bot=cq.message.bot,
        state=state,
        chat_id=cq.message.chat.id,
        text=text,
        keyboard=keyboard,
        message=cq.message,
    )
    await state.update_data(channels_view={"type": "overview"})
    await cq.answer()


async def show_recent_channels_view(cq: CallbackQuery, state: FSMContext) -> None:
    contractor_id_int = cq.from_user.id
    items = await _fetch_channels(contractor_id_int, limit=5)
    if not items:
        text = "–ö–∞–Ω–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{MENU_PREFIX}:main")]])
    else:
        text_lines = ["üóÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞–Ω–∞–ª—ã:", ""]
        for item in items:
            text_lines.append(f"‚Ä¢ {item['title']}")
        text = "\n".join(text_lines)
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"üìÇ {item['title']}", callback_data=f"{MENU_PREFIX}:detail:{item['project_id']}:recent:0")]
                for item in items
            ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{MENU_PREFIX}:main")]]
        )
    await _ensure_card(
        bot=cq.message.bot,
        state=state,
        chat_id=cq.message.chat.id,
        text=text,
        keyboard=keyboard,
        message=cq.message,
    )
    await state.update_data(channels_view={"type": "recent"})
    await cq.answer()


async def show_all_channels_view(cq: CallbackQuery, state: FSMContext, page: int = 0) -> None:
    contractor_id_int = cq.from_user.id
    items = await _fetch_channels(contractor_id_int, limit=500)
    if not items:
        text = "–ö–∞–Ω–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{MENU_PREFIX}:main")]])
    else:
        total_pages = max(1, (len(items) + CHANNEL_PAGE_SIZE - 1) // CHANNEL_PAGE_SIZE)
        page = max(0, min(page, total_pages - 1))
        start = page * CHANNEL_PAGE_SIZE
        subset = items[start : start + CHANNEL_PAGE_SIZE]

        text_lines = [f"üìã –í—Å–µ –∫–∞–Ω–∞–ª—ã ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}", ""]
        text_lines.extend(f"‚Ä¢ {item['title']}" for item in subset)
        text = "\n".join(text_lines)

        rows: List[List[InlineKeyboardButton]] = [
            [InlineKeyboardButton(text=f"üìÇ {item['title']}", callback_data=f"{MENU_PREFIX}:detail:{item['project_id']}:all:{page}")]
            for item in subset
        ]
        if total_pages > 1:
            nav_row: List[InlineKeyboardButton] = []
            if page > 0:
                nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"{MENU_PREFIX}:all:{page - 1}"))
            nav_row.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data=f"{MENU_PREFIX}:noop"))
            if page + 1 < total_pages:
                nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"{MENU_PREFIX}:all:{page + 1}"))
            rows.append(nav_row)
        rows.append([InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data=f"{MENU_PREFIX}:main")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=rows)

    await _ensure_card(
        bot=cq.message.bot,
        state=state,
        chat_id=cq.message.chat.id,
        text=text,
        keyboard=keyboard,
        message=cq.message,
    )
    await state.update_data(channels_view={"type": "all", "page": page})
    await cq.answer()


async def start_channels_search_inline(cq: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(ChannelsSearch.waiting_query)
    text = "üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞."
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{MENU_PREFIX}:main")]])
    await _ensure_card(
        bot=cq.message.bot,
        state=state,
        chat_id=cq.message.chat.id,
        text=text,
        keyboard=keyboard,
        message=cq.message,
    )
    await state.update_data(channels_view={"type": "search"})
    await cq.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ —á–∞—Ç")


async def _get_channel_detail(project_id: int) -> Optional[Dict[str, Any]]:
    channel = await channels_service.get_channel_by_project(project_id)
    if not channel:
        return None
    stats = await channels_service.get_channel_stats(int(channel["channel_id"]))
    return stats


async def _format_channel_detail(bot: Bot, info: Dict[str, Any]) -> tuple[str, InlineKeyboardMarkup]:
    project_id = info.get("project_id")
    title = info.get("title") or info.get("project_title") or "–ö–∞–Ω–∞–ª"
    channel_id = int(info["channel_id"])

    lines = [
        "üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:",
        f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}",
        f"‚Ä¢ ID: {channel_id}",
    ]
    if info.get("username"):
        lines.append(f"‚Ä¢ Username: @{info['username']}")
    if info.get("type"):
        lines.append(f"‚Ä¢ –¢–∏–ø: {info['type']}")
    if info.get("created_at"):
        lines.append(f"‚Ä¢ –°–æ–∑–¥–∞–Ω: {info['created_at']:%Y-%m-%d %H:%M:%S}")
    if info.get("first_message_at"):
        lines.append(f"‚Ä¢ –ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç: {info['first_message_at']:%Y-%m-%d %H:%M:%S}")

    lines.append(f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {info.get('files_count', 0)}")
    lines.append(f"‚Ä¢ –°—É–º–º–∞—Ä–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: {info.get('views_total', 0)}")

    lines.append("")
    lines.append("–£—á–∞—Å—Ç–Ω–∏–∫–∏ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã):")
    try:
        admins = await bot.get_chat_administrators(channel_id)
        for admin in admins:
            user = admin.user
            username = f"@{user.username}" if user.username else "–±–µ–∑ username"
            lines.append(f"  ‚Ä¢ {user.full_name} ({username}, id={user.id})")
    except (TelegramBadRequest, TelegramForbiddenError, TelegramNotFound):
        lines.append("  ‚Ä¢ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", callback_data=f"{MENU_PREFIX}:goto:{project_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª", callback_data=f"{MENU_PREFIX}:edit:{project_id}")],
            [InlineKeyboardButton(text="üìé –î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã", callback_data=f"{MENU_PREFIX}:files:{project_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{MENU_PREFIX}:main")],
        ]
    )
    return "\n".join(lines), keyboard


async def show_channel_detail_view(cq: CallbackQuery, state: FSMContext, project_id: int) -> None:
    info = await _get_channel_detail(project_id)
    if not info:
        await cq.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    text, keyboard = await _format_channel_detail(cq.message.bot, info)
    await _ensure_card(
        bot=cq.message.bot,
        state=state,
        chat_id=cq.message.chat.id,
        text=text,
        keyboard=keyboard,
        message=cq.message,
    )
    await state.update_data(channels_view={"type": "detail", "project_id": project_id})
    await cq.answer()


@router.message(ChannelsSearch.waiting_query)
async def handle_search_query(m: Message, state: FSMContext) -> None:
    query = (m.text or "").strip()
    if not query:
        await m.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.")
        return
    await state.set_state(None)
    contractor_id_int = m.from_user.id
    items = await _fetch_channels(contractor_id_int, search=query, limit=50)
    if not items:
        text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ ¬´{query}¬ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{MENU_PREFIX}:main")]])
    else:
        text_lines = [f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ ¬´{query}¬ª:"] + [f"‚Ä¢ {item['title']}" for item in items]
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"üìÇ {item['title']}", callback_data=f"{MENU_PREFIX}:detail:{item['project_id']}:search:0")]
                for item in items
            ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{MENU_PREFIX}:main")]]
        )
        text = "\n".join(text_lines)
    await _ensure_card(
        bot=m.bot,
        state=state,
        chat_id=m.chat.id,
        text=text,
        keyboard=keyboard,
    )
    await state.update_data(channels_view={"type": "search_results", "query": query})


@router.callback_query(F.data.startswith(f"{MENU_PREFIX}:"))
async def channels_menu_callback(cq: CallbackQuery, state: FSMContext) -> None:
    parts = cq.data.split(":")
    action = parts[1]
    if action == "main":
        await show_channels_overview(cq, state)
    elif action == "recent":
        await show_recent_channels_view(cq, state)
    elif action == "all":
        page = int(parts[2]) if len(parts) > 2 else 0
        await show_all_channels_view(cq, state, page)
    elif action == "search":
        await start_channels_search_inline(cq, state)
    elif action == "detail":
        project_id = int(parts[2])
        await show_channel_detail_view(cq, state, project_id)
    elif action == "goto":
        project_id = int(parts[2])
        channel = await channels_service.get_channel_by_project(project_id)
        if not channel:
            await cq.answer("–ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        channel_id = int(channel["channel_id"])
        title = channel.get("title") or "–ö–∞–Ω–∞–ª"
        try:
            chat = await cq.bot.get_chat(channel_id)
            if chat.username:
                url = f"https://t.me/{chat.username}"
            else:
                url = await cq.bot.export_chat_invite_link(channel_id)
            await cq.message.answer(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª {title}:\n{url}")
            await cq.answer()
        except Exception as exc:
            await cq.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É: {exc}", show_alert=True)
    elif action in {"edit", "files"}:
        await cq.answer("–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
    elif action == "noop":
        await cq.answer()
    else:
        await cq.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
