from __future__ import annotations
import os, uuid, base64, httpx
from aiogram import Router, F, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext

from bot.handlers.menu_common import BTN_SUBSCRIPTION
from bot.services.billing import billing  # —Ç–≤–æ–π —Å–µ—Ä–≤–∏—Å –±–∏–ª–ª–∏–Ω–≥–∞ (–∑–∞–≥–ª—É—à–∫—É –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å)
from bot.services.db import db

router = Router(name="subscription")

# ---------- UI helpers ----------
def ik_btn(text, data): return InlineKeyboardButton(text=text, callback_data=data)
def ik_kb(rows): return InlineKeyboardMarkup(inline_keyboard=rows)

# ---------- –ÆKassa –ø—Ä–æ—Å—Ç–∞—è –æ–±—ë—Ä—Ç–∫–∞ (–±–µ–∑ SDK) ----------
YKASSA_SHOP_ID  = os.getenv("YKASSA_SHOP_ID", "")
YKASSA_SECRET   = os.getenv("YKASSA_SECRET", "")
PUBLIC_BASE_URL = os.getenv("PUBLIC_BASE_URL", "https://example.com")  # –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã

def _yk_headers(idempotence_key: str) -> dict:
    auth = base64.b64encode(f"{YKASSA_SHOP_ID}:{YKASSA_SECRET}".encode()).decode()
    return {
        "Authorization": f"Basic {auth}",
        "Idempotence-Key": idempotence_key,
        "Content-Type": "application/json",
        "Accept": "application/json",
    }

async def yk_create_payment(amount_rub: int, description: str, return_path: str, metadata: dict) -> dict:
    """
    –°–æ–∑–¥–∞—ë—Ç –ø–ª–∞—Ç—ë–∂ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON –ÆKassa.
    """
    body = {
        "amount": {"value": f"{amount_rub}.00", "currency": "RUB"},
        "capture": True,
        "description": description,
        "confirmation": {
            "type": "redirect",
            "return_url": f"{PUBLIC_BASE_URL.rstrip('/')}{return_path}",
        },
        "metadata": metadata,
    }
    key = str(uuid.uuid4())
    async with httpx.AsyncClient(timeout=30) as cli:
        r = await cli.post("https://api.yookassa.ru/v3/payments", headers=_yk_headers(key), json=body)
        r.raise_for_status()
        return r.json()

async def yk_get_payment(payment_id: str) -> dict:
    async with httpx.AsyncClient(timeout=15) as cli:
        r = await cli.get(f"https://api.yookassa.ru/v3/payments/{payment_id}", headers=_yk_headers(str(uuid.uuid4())))
        r.raise_for_status()
        return r.json()

# ---------- UI —Ä–µ–Ω–¥–µ—Ä ----------
async def _subscription_card_text(user_id: int) -> str:
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É (–µ—Å–ª–∏ –µ—ë –ø–æ–∫–∞ –Ω–µ—Ç ‚Äî –æ–∫, –ø–æ–∫–∞–∂–µ–º FREE)
    sub = await billing.get_subscription(user_id)
    if not sub:
        plan = "FREE"
        ends = "‚Äî"
    else:
        plan = sub.get("plan_code", "UNKNOWN")
        ends = sub.get("valid_until", "‚Äî")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —Å—á—ë—Ç—á–∏–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ analytics).
    overview = await db.fetchrow(
        "SELECT * FROM analytics.profile_overview WHERE contractor_id = %s",
        (user_id,)
    )
    channels_total = overview.get("channels_total") if overview else None
    files_total    = overview.get("files_total") if overview else None
    views_total    = overview.get("views_total") if overview else None
    gifts_queue    = overview.get("gifts_queue") if overview else None
    ref_progress   = overview.get("ref_progress") if overview else None

    lines = [
        "<b>–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞</b>",
        f"‚Ä¢ –ü–ª–∞–Ω: <b>{plan}</b>",
        f"‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {ends}",
        "",
        "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>",
        f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {channels_total or '–Ω/–¥'}",
        f"‚Ä¢ –§–∞–π–ª–æ–≤: {files_total or '–Ω/–¥'}",
        f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {views_total or '–Ω/–¥'}",
        f"‚Ä¢ –ü–æ–¥–∞—Ä–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏: {gifts_queue or 0}",
        f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª-–ø—Ä–æ–≥—Ä–µ—Å—Å: {ref_progress or '–Ω/–¥'}",
    ]
    return "\n".join(lines)

def _subscription_keyboard() -> InlineKeyboardMarkup:
    rows = [
        [ik_btn("üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å PRO ‚Äî 590 ‚ÇΩ/–º–µ—Å", "sub:buy:pro")],
        [ik_btn("üíº Business ‚Äî 1490 ‚ÇΩ/–º–µ—Å", "sub:buy:biz")],
        [ik_btn("üìú –¢–∞—Ä–∏—Ñ—ã", "sub:tariffs"), ik_btn("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", "sub:check")],
        [ik_btn("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "sub:back")],
    ]
    return ik_kb(rows)

# ---------- Handlers ----------
@router.message(F.text == BTN_SUBSCRIPTION)
async def open_subscription_card(m: types.Message, state: FSMContext):
    text = await _subscription_card_text(m.from_user.id)
    await m.answer(text, parse_mode="HTML", reply_markup=_subscription_keyboard())

@router.callback_query(F.data == "sub:tariffs")
async def show_tariffs(cq: types.CallbackQuery):
    text = (
        "<b>–¢–∞—Ä–∏—Ñ—ã</b>\n"
        "‚Ä¢ FREE ‚Äî 5 –∫–∞–Ω–∞–ª–æ–≤, –±–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –±–æ—Ç–∞\n"
        "‚Ä¢ PRO ‚Äî 590 ‚ÇΩ/–º–µ—Å: –±–µ–∑–ª–∏–º–∏—Ç, –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
        "‚Ä¢ Business ‚Äî 1490 ‚ÇΩ/–º–µ—Å: –≤—Å—ë –∏–∑ PRO + –∫–æ–º–∞–Ω–¥–∞ –¥–æ 4 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, CRM-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è\n"
    )
    await cq.message.edit_text(text, parse_mode="HTML", reply_markup=_subscription_keyboard())
    await cq.answer()

@router.callback_query(F.data.in_(["sub:buy:pro", "sub:buy:biz"]))
async def start_payment(cq: types.CallbackQuery):
    plan = "PRO" if cq.data.endswith("pro") else "BUSINESS"
    amount = 590 if plan == "PRO" else 1490

    # –ú–µ—Ç–∞ –Ω–∞ –±—É–¥—É—â–µ–µ (—á—Ç–æ–±—ã –≤ webhook/–ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–Ω—è—Ç—å, —á—Ç–æ —ç—Ç–æ –∑–∞ –ø–ª–∞—Ç—ë–∂)
    metadata = {
        "contractor_id": cq.from_user.id,
        "plan": plan,
        "period": "1m",
        "source": "bot",
    }
    try:
        data = await yk_create_payment(
            amount_rub=amount,
            description=f"{plan} ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
            return_path="/payments/return",  # –º–æ–∂–µ—à—å –ø–æ—Ç–æ–º —Å–¥–µ–ª–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É ¬´–°–ø–∞—Å–∏–±–æ¬ª
            metadata=metadata,
        )
        confirmation_url = data["confirmation"]["confirmation_url"]
        payment_id = data["id"]

        # –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Å–≤–æ—é —Ç–∞–±–ª–∏—Ü—É –ø–ª–∞—Ç–µ–∂–µ–π (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å)
        # await billing.save_payment(payment_id, cq.from_user.id, plan, amount)

        await cq.message.answer(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É ({plan}):\n{confirmation_url}")
        await cq.answer("–û—Ç–∫—Ä—ã–≤–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É", show_alert=False)
    except httpx.HTTPError as e:
        await cq.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.callback_query(F.data == "sub:check")
async def check_payment(cq: types.CallbackQuery):
    # –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—à—å payment_id ‚Äî –≤–æ–∑—å–º–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–π –ø–ª–∞—Ç—ë–∂ –∏–∑ —Å–≤–æ–µ–π –ë–î.
    # –ó–¥–µ—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π.
    await cq.answer("–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'. –ê–≤—Ç–æ–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤/–æ–ø–ª–∞—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–∑ –≤ –¥–µ–Ω—å.", show_alert=True)

@router.callback_query(F.data == "sub:back")
async def back_to_menu(cq: types.CallbackQuery):
    await cq.message.delete()
    await cq.answer()
